?subset
# Exercício 8 - Usando a função subset, crie um novo dataframe com o conjunto de dados do
# dataframe iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
example('subset')
subset(iris,Sepal.Length > 7)
iris[Sepal.Length > 7]
irisSepalMaiorSete = subset(iris,Sepal.Length > 7)
irisSepalMaiorSete
# Exercícios 9 (Desafio) - Crie um dataframe que seja cópia do dataframe iris e usando a
# função slice(), divida o dataframe em um subset de 15 linhas
# Dica 1: Você vai ter que instalar e carregar o pacote dplyr
# Dica 2: Consulte o help para aprender como usar a função slice()
library(dplyr)
# Exercícios 9 (Desafio) - Crie um dataframe que seja cópia do dataframe iris e usando a
# função slice(), divida o dataframe em um subset de 15 linhas
# Dica 1: Você vai ter que instalar e carregar o pacote dplyr
# Dica 2: Consulte o help para aprender como usar a função slice()
install.packages('dplyr')
install.packages("dplyr")
library(dplyr)
?slice
# Exercício 8 - Usando a função subset, crie um novo dataframe com o conjunto de dados do
# dataframe iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
example('subset')
# Exercício 8 - Usando a função subset, crie um novo dataframe com o conjunto de dados do
# dataframe iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
?subset
?slice
slice(irisCopia, 1:15)
slice(irisCopia, 15)
irisCopia = iris
irisCopia
slice(irisCopia, 15)
slice(irisCopia, 1:15)
# Exercícios 10 - Use a função filter no seu novo dataframe criado no item anterior e
# retorne apenas valores em que Sepal.Length > 6
# Dica: Use o RSiteSearch para aprender como usar a função filter
filter(irisCopia, Sepal.Length > 6)
# Exercício 3 - Crie uma lista unindo o vetor e matriz criados anteriormente
lista <- list(c(vetor30,matriz4x4))
# Exercício 1 - Crie um vetor com 30 números inteiros
vetor30 <- c(1:30)
vetor30
# Exercício 2 - Crie uma matriz com 4 linhas e 4 colunas preenchida com números inteiros
matriz4x4 <- matrix(c(1:16), nc=4, nr=4, byrow=TRUE)
# Exercício 3 - Crie uma lista unindo o vetor e matriz criados anteriormente
lista <- list(c(vetor30,matriz4x4))
lista
# Exercício 4 - Usando a função read.table() leia o arquivo do link abaixo para um dataframe
# http://data.princeton.edu/wws509/datasets/effort.dat
dataframe1 <- read.table("http://data.princeton.edu/wws509/datasets/effort.dat")
dataframe1
# Exercício 5 - Transforme o dataframe anterior, em um dataframe nomeado com os seguintes labels:
# c("config", "esfc", "chang")
colnames(dataframe1) = (list(c("config", "esfc", "chang")))
dataframe1
# Exercício 5 - Transforme o dataframe anterior, em um dataframe nomeado com os seguintes labels:
# c("config", "esfc", "chang")
colnames(dataframe1) = (c("config", "esfc", "chang"))
dataframe1
names(dataframe1) = (c("config", "esfc", "chang"))
dataframe1
# Exercício 4 - Usando a função read.table() leia o arquivo do link abaixo para um dataframe
# http://data.princeton.edu/wws509/datasets/effort.dat
dataframe1 <- read.table("http://data.princeton.edu/wws509/datasets/effort.dat")
dataframe1
names(dataframe1) = (c("config", "esfc", "chang"))
dataframe1
view(data_frame1)
view(dataframe1)
View(dataframe1)
class(iris)
dim(iris)
str(iris)
plot(iris$Sepal.Length, iris$Sepal.Width)
# Exercícios 10 - Use a função filter no seu novo dataframe criado no item anterior e
# retorne apenas valores em que Sepal.Length > 6
# Dica: Use o RSiteSearch para aprender como usar a função filter
RSiteSearch(filter)
# Exercícios 10 - Use a função filter no seu novo dataframe criado no item anterior e
# retorne apenas valores em que Sepal.Length > 6
# Dica: Use o RSiteSearch para aprender como usar a função filter
RSiteSearch('filter')
v <- c(2,1,2,3,1,2,3,4,1,5,5,3,2,3)
v
uniqv <- unique(v)
uniqv
match(v, uniqv)
tabulate(match(v, uniqv))
which.max(tabulate(match(v, uniqv)))
uniqv[which.max(tabulate(match(v, uniqv)))]
tamanhos = c(38, 38, 36, 37, 36, 36, 40, 39, 36, 35, 36)
mean(tamanhos)
median(tamanhos)
moda = function(dados) {
vetor = table(as.vector(dados))
names(vetor)[vetor == max(vetor)]
}
moda(tamanhos)
vetor = table(as.vector(tamanhos))
vetor
as.vector(tamanhos)
tamanhos = c(38, 38, 36, 37, 36, 36, 40, 39, 36, 35, 36)
class(tamanhos)
typeof(tamanhos)
mode(tamanhos)
tamanhos = c(38, 38, 36, 37, 36, 36, 40, 39, 36, 35, 36)
tamanhos
class(tamanhos)
typeof(tamanhos)
mode(tamanhos)
as.vector(tamanhos)
tamanhos
vetorTam = as.vector(tamanhos)
tamanhos
vetor = table(as.vector(tamanhos))
vetor
class(vetor)
typeof(vetor)
mode(vetor)
summary(vetor)
dim(vetor)
names(vetor)
vetor
vetor
vetor == max(vetor)
vetor
names(vetor)[vetor == max(vetor)]
names(vetor)
teste = names(vetor)
teste
teste = names(vetor)[vetor == max(vetor)]
teste
# Exercício 7 - Se houver 12 carros atravessando uma ponte por minuto, em média,
# encontre a probabilidade de ter 15 ou mais carros cruzando a ponte em um determinado minuto.
?dpois
dpois(15,1)
dpois(12,1)
dpois(15,1)
# Exercício 8 - Suponha que haja 12 questões de múltipla escolha em um questionário de inglês.
# Cada questão tem cinco respostas possíveis e apenas uma delas está correta.
# Encontre a probabilidade de ter quatro ou menos respostas corretas se um aluno tentar
# responder a cada pergunta aleatoriamente.
dbinom(1, 5)
dbinom(4, 12, 0.20)
# Exercício 7 - Se houver 12 carros atravessando uma ponte por minuto, em média,
# encontre a probabilidade de ter 15 ou mais carros cruzando a ponte em um determinado minuto.
# A probabilidade de ter 14 ou menos carros atravessando a ponte em um
# determinado minuto é dada pela função ppois.
ppois(14, lambda=12)
ppois(15, 12, lower=FALSE)
pbinom(4, 12, 0.2)
dbinom(4, 12, 0.20)
# Erro padrão
erro_padrao_amostra1 = sd(amostra1$arr_delay) / sqrt(nrow(amostra1))
library('ggplot2')
library('dplyr')
library('nycflights13')
pop_data <- subset(flights, carrier == "UA" | carrier == "DL", select = c(carrier, arr_delay))
# Dica: inclua uma coluna chamada sample_id preenchida com número 1 para a primeira
# amostra e 2 para a segunda amostra
amostra1 <- head(subset(pop_data, carrier == "UA"), 1000)
amostra1$sample_id <-1
amostra2 <- head(subset(pop_data, carrier == "DL"), 1000)
amostra2$sample_id <-2
dataset_final <- merge(amostra1, amostra2, all = TRUE)
View(dataset_final)
# Erro padrão
erro_padrao_amostra1 = sd(amostra1$arr_delay) / sqrt(nrow(amostra1))
erro_padrao_amostra1
# Exercício 5 - Calcule o intervalo de confiança (95%) da amostra2
erro_padrao_amostra2 = sd(amostra2$arr_delay) / sqrt(nrow(amostra2))
erro_padrao_amostra2
# Erro padrão
sd1 = sd(amostra1$arr_delay)
sd1
# Erro padrão
sd1 = sd(amostra1$arr_delay, na.rm=TRUE)
sd1
erro_padrao_amostra1 = sd(amostra1$arr_delay, na.rm=TRUE) / sqrt(nrow(amostra1))
erro_padrao_amostra1
erro_padrao_amostra1 = sd(amostra1$arr_delay na.rm=TRUE) / sqrt(nrow(amostra1))
erro_padrao_amostra1 = sd(amostra1$arr_delay, na.rm=TRUE) / sqrt(nrow(amostra1))
erro_padrao_amostra1
# Exercício 5 - Calcule o intervalo de confiança (95%) da amostra2
erro_padrao_amostra2 = sd(amostra2$arr_delay, na.rm=TRUE) / sqrt(nrow(amostra2))
erro_padrao_amostra2
# Intervalo de confiança
intervaloAmostra1 <- 1 - erro_padrao_amostra1
intervaloAmostra1
intervaloAmostra2 <- 1 - erro_padrao_amostra2
intervaloAmostra2
install.packages(c("gdata", "readxl", "rJava", "XLConnect", "xlsx"))
# Instalando os pacotes
install.packages('rJava')
# Instalando os pacotes
install.packages('rJava')
# Instalando os pacotes
install.packages('rJava')
# Instalando os pacotes
install.packages('rJava')
# Instalando os pacotes
install.packages('rJava')
install.packages("xlsx")
install.packages("XLConnect")
install.packages("readxl")
setwd("/home/talita/covidProject/scripts")
getwd()
# Instalando pacotes
#install.packages("ggpubr")
# Carregando os pacotes
library(dplyr)
library(ggplot2)
library(ggpubr)
# Resumo dos arquivos
# Dados Kaggle Mundo (https://www.kaggle.com/sudalairajkumar/novel-corona-virus-2019-dataset/)
read.csv("../datasets/covid_19_data.csv")
# Dados Kaggle Brasil (https://www.kaggle.com/unanimad/corona-virus-brazil)
read.csv("../datasets/brazil_covid19.csv")
# Carregando dados
world <- data.frame(read.csv("../datasets/covid_19_data.csv"))
brazilRegions <- data.frame(read.csv("../datasets/brazil_covid19.csv"))
#View(world)
#View(brazilRegions)
# Organizando o shape dos dados
# Mundo
world <- world %>%
mutate(ObservationDate = as.Date(ObservationDate, format='%m/%d/%Y')) %>%
filter(Province.State == "") %>%
filter(Confirmed != 0)
colnames(world) <- c("row", "date", "province", "state", "update", "cases", "deaths", "recovered")
# Brasil
brazilRegions <- brazilRegions %>%
mutate(date = as.Date(date, format='%Y-%m-%d')) %>%
filter(cases != 0)
brazil <- world %>% filter(state == "Brazil" & cases != 0)
#View(brazil)
# Totalizando dados
# Total de casos e mortes no Brasil por Região
totalBrazilByRegion <- brazilRegions %>%
filter(brazilRegions$date == Sys.Date() - 1) %>%
group_by(region) %>%
summarise_at(vars(cases, deaths), funs(sum))
#View(totalBrazilByRegion)
# Total de Casos no Brasil
totalCasesBrazil <- sum(totalBrazilByRegion$cases)
totalCasesBrazil
# Total de Mortes no Brasil
totalDeathsBrazil <- sum(totalBrazilByRegion$deaths)
totalDeathsBrazil
# Estados Foco no Brasil
# DF
casesDF <- brazilRegions %>%
filter(brazilRegions$state == "Distrito Federal") %>%
select(state, date, cases, deaths)
casesDF$id <- c(1:nrow(casesDF))
#View(casesDF)
# Gráfico de crescimento de casos no DF
plotDF <- ggplot(casesDF, aes(date, cases, colours=cases)) +
geom_line(color="red") +
geom_point(color="red") +
geom_text(aes(label=cases), vjust=1) +
ggtitle("Casos de COVID-19 no DF")
plotDF
# SP
casesSP <- brazilRegions %>%
filter(brazilRegions$state == "São Paulo") %>%
select(state, date, cases, deaths)
casesSP$id <- c(1:nrow(casesSP))
#View(casesSP)
# Gráfico de crescimento de casos em SP
plotSP <- ggplot(casesSP, aes(date, cases, colours=cases)) +
geom_line(color="red") +
geom_point(color="red") +
geom_text(aes(label=cases), vjust=1) +
ggtitle("Casos de COVID-19 em SP")
plotSP
# RJ
casesRJ <- brazilRegions %>%
filter(brazilRegions$state == "Rio de Janeiro") %>%
select(state, date, cases, deaths)
casesRJ$id <- c(1:nrow(casesRJ))
#View(casesRJ)
# Gráfico de crescimento de casos no RJ
plotRJ <- ggplot(casesRJ, aes(date, cases, colours=cases)) +
geom_line(color="red") +
geom_point(color="red") +
geom_text(aes(label=cases), vjust=1) +
ggtitle("Casos de COVID-19 no RJ")
plotRJ
# CE
casesCE <- brazilRegions %>%
filter(brazilRegions$state == "Ceará") %>%
select(state, date, cases, deaths)
casesCE$id <- c(1:nrow(casesCE))
#View(casesCE)
# Gráfico de crescimento de casos no CE
plotCE <- ggplot(casesCE, aes(date, cases, colours=cases)) +
geom_line(color="red") +
geom_point(color="red") +
geom_text(aes(label=cases), vjust=1) +
ggtitle("Casos de COVID-19 no CE")
plotCE
# AM
casesAM <- brazilRegions %>%
filter(brazilRegions$state == "Amazonas") %>%
select(state, date, cases, deaths)
casesAM$id <- c(1:nrow(casesAM))
#View(casesAM)
# Gráfico de crescimento de casos no AM
plotAM <- ggplot(casesAM, aes(date, cases, colours=cases)) +
geom_line(color="red") +
geom_point(color="red") +
geom_text(aes(label=cases), vjust=1) +
ggtitle("Casos de COVID-19 no AM")
plotAM
# Combinando gráficos dos Estados Foco
focusStates <- rbind(casesDF, casesSP, casesRJ, casesCE, casesAM)
plotfocusStates <- ggplot(focusStates, aes(x=id, y=cases, col=state, fill=state)) +
geom_line() +
geom_point() +
geom_text(aes(label=cases), vjust=1) +
ggtitle("Casos de COVID-19 nos Estados Foco")
plotfocusStates
# GRÁFICOS BRASIL
# Gráfico do total de casos por Região no Brasil
totalBrazilByRegion %>%
ggplot(aes(x = reorder(region, -cases), y = cases, color = region, fill = region)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label=cases), vjust=0) +
ggtitle("Casos de COVID-19 por Região do Brasil")
# Gráfico do total de mortes por Região no Brasil
totalBrazilByRegion %>%
ggplot(aes(x = reorder(region, -deaths), y = deaths, color = region, fill = region)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label=deaths), vjust=0) +
ggtitle("Mortes por COVID-19 por Região do Brasil")
# Totais Brasil
# Casos Brasil
casesBrazil <- brazil %>%
select(state, date, cases, deaths)
casesBrazil$id <- c(1:nrow(casesBrazil))
#View(casesBrazil)
# Mortes Brasil
deathsBrazil <- world %>%
filter(world$state == "Brazil" & world$deaths != 0) %>%
select(state, date, cases, deaths)
deathsBrazil$id <- c(1:nrow(deathsBrazil))
#View(deathsBrazil)
# Totais Mundo
# Itália
# Casos Itália
casesItaly <- world %>%
filter(world$state == "Italy" & world$cases != 0) %>%
select(state, date, cases, deaths)
casesItaly$id <- c(1:nrow(casesItaly))
#View(casesItaly)
casesItalyFilter <- casesItaly %>%
filter(casesItaly$id <= 50)
# Mortes Itália
deathsItaly <- world %>%
filter(world$state == "Italy" & world$deaths != 0) %>%
select(state, date, cases, deaths)
deathsItaly$id <- c(1:nrow(deathsItaly))
#View(deathsItaly)
deathsItalyFilter <- deathsItaly %>%
filter(deathsItaly$id <=30)
#View(deathsItalyFilter)
# Gráficos Brasil e Mundo
# Gráfico de crescimento de casos no Brasil por dia
plotBrazil <- ggplot(casesBrazil, aes(date, cases, colours=cases)) +
geom_line(color="red") +
geom_point(color="red") +
geom_text(aes(label=cases), vjust=1) +
ggtitle("Casos de COVID-19 no Brazil por dia")
plotBrazil
# Gráfico de crescimento de casos na Itália por dia
plotItaly <- ggplot(casesItaly, aes(date, cases, colours=cases)) +
geom_line(color="red") +
geom_point(color="red") +
geom_text(aes(label=cases), vjust=1) +
ggtitle("Casos de COVID-19 na Itália por dia")
plotItaly
# Comparando Brasil e Mundo
# Brasil e Itália
# Casos Brasil e Itália
# Comparando dados Brasil e Itália
brazilItaly <- rbind(casesItaly, casesBrazil)
plotbrazilItaly <- ggplot(brazilItaly, aes(x=id, y=cases, col=state, fill=state)) +
geom_line() +
geom_point() +
geom_text(aes(label=cases), vjust=1) +
ggtitle("Comparação de Casos de COVID-19 Brasil e Itália")
plotbrazilItaly
# Comparando dados Brasil e Itália (até o dia atual da doença no Brasil)
brazilItalyFilter <- rbind(casesItalyFilter, casesBrazil)
plotbrazilItalyFilter <- ggplot(brazilItalyFilter, aes(x=id, y=cases, col=state, fill=state)) +
geom_line() +
geom_point() +
geom_text(aes(label=cases), vjust=1) +
ggtitle("Comparação de Casos de COVID-19 Brasil e Itália")
plotbrazilItalyFilter
# Comparando mortes Brasil e Itália
brazilItalyDeaths <- rbind(deathsItalyFilter, deathsBrazil)
plotbrazilItalyDeaths <- ggplot(brazilItalyDeaths, aes(x=id, y=deaths, col=state, fill=state)) +
geom_line() +
geom_point() +
geom_text(aes(label=deaths), vjust=1) +
ggtitle("Comparação de Mortes de COVID-19 Brasil e Itália")
plotbrazilItalyDeaths
# Comparando dados dos Estados do Brasil e Mundo
# Combinando gráficos dos Estados Foco com a Itália
statesAndItaly <- rbind(focusStates, casesItaly)
plotstatesAndItaly <- ggplot(statesAndItaly, aes(x=id, y=cases, col=state, fill=state)) +
geom_line() +
geom_point() +
geom_text(aes(label=cases), vjust=1) +
ggtitle("Comparação de Casos de COVID-19 nos Estados Foco e Itália")
plotstatesAndItaly
# Combinando gráficos dos Estados Foco com a Itália (até o dia atual da doença no Brasil)
statesAndItalyFilter <- rbind(focusStates, casesItalyFilter)
plotstatesAndItalyFilter <- ggplot(statesAndItalyFilter, aes(x=id, y=cases, col=state, fill=state)) +
geom_line() +
geom_point() +
geom_text(aes(label=cases), vjust=1) +
ggtitle("Comparação de Casos de COVID-19 nos Estados Foco e Itália")
plotstatesAndItalyFilter
# Casos Itália
casesItaly <- world %>%
filter(world$state == "Italy" & world$cases != 0) %>%
select(state, date, cases, deaths)
casesItaly$id <- c(1:nrow(casesItaly))
#View(casesItaly)
casesItalyFilter <- casesItaly %>%
filter(casesItaly$id <= 70)
# Mortes Itália
deathsItaly <- world %>%
filter(world$state == "Italy" & world$deaths != 0) %>%
select(state, date, cases, deaths)
deathsItaly$id <- c(1:nrow(deathsItaly))
#View(deathsItaly)
deathsItalyFilter <- deathsItaly %>%
filter(deathsItaly$id <=50)
#View(deathsItalyFilter)
# Gráfico de crescimento de casos no Brasil por dia
plotBrazil <- ggplot(casesBrazil, aes(date, cases, colours=cases)) +
geom_line(color="red") +
geom_point(color="red") +
geom_text(aes(label=cases), vjust=1) +
ggtitle("Casos de COVID-19 no Brazil por dia")
plotBrazil
# Gráfico de crescimento de casos na Itália por dia
plotItaly <- ggplot(casesItaly, aes(date, cases, colours=cases)) +
geom_line(color="red") +
geom_point(color="red") +
geom_text(aes(label=cases), vjust=1) +
ggtitle("Casos de COVID-19 na Itália por dia")
plotItaly
# Comparando Brasil e Mundo
# Brasil e Itália
# Casos Brasil e Itália
# Comparando dados Brasil e Itália
brazilItaly <- rbind(casesItaly, casesBrazil)
plotbrazilItaly <- ggplot(brazilItaly, aes(x=id, y=cases, col=state, fill=state)) +
geom_line() +
geom_point() +
geom_text(aes(label=cases), vjust=1) +
ggtitle("Comparação de Casos de COVID-19 Brasil e Itália")
plotbrazilItaly
# Comparando dados Brasil e Itália (até o dia atual da doença no Brasil)
brazilItalyFilter <- rbind(casesItalyFilter, casesBrazil)
plotbrazilItalyFilter <- ggplot(brazilItalyFilter, aes(x=id, y=cases, col=state, fill=state)) +
geom_line() +
geom_point() +
geom_text(aes(label=cases), vjust=1) +
ggtitle("Comparação de Casos de COVID-19 Brasil e Itália")
plotbrazilItalyFilter
# Comparando mortes Brasil e Itália
brazilItalyDeaths <- rbind(deathsItalyFilter, deathsBrazil)
plotbrazilItalyDeaths <- ggplot(brazilItalyDeaths, aes(x=id, y=deaths, col=state, fill=state)) +
geom_line() +
geom_point() +
geom_text(aes(label=deaths), vjust=1) +
ggtitle("Comparação de Mortes de COVID-19 Brasil e Itália")
plotbrazilItalyDeaths
# Comparando dados dos Estados do Brasil e Mundo
# Combinando gráficos dos Estados Foco com a Itália
statesAndItaly <- rbind(focusStates, casesItaly)
plotstatesAndItaly <- ggplot(statesAndItaly, aes(x=id, y=cases, col=state, fill=state)) +
geom_line() +
geom_point() +
geom_text(aes(label=cases), vjust=1) +
ggtitle("Comparação de Casos de COVID-19 nos Estados Foco e Itália")
plotstatesAndItaly
# Combinando gráficos dos Estados Foco com a Itália (até o dia atual da doença no Brasil)
statesAndItalyFilter <- rbind(focusStates, casesItalyFilter)
plotstatesAndItalyFilter <- ggplot(statesAndItalyFilter, aes(x=id, y=cases, col=state, fill=state)) +
geom_line() +
geom_point() +
geom_text(aes(label=cases), vjust=1) +
ggtitle("Comparação de Casos de COVID-19 nos Estados Foco e Itália")
plotstatesAndItalyFilter
plotAM
plotfocusStates <- ggplot(focusStates, aes(x=id, y=cases, col=state, fill=state)) +
geom_line() +
geom_point() +
geom_text(aes(label=cases), vjust=1) +
ggtitle("Casos de COVID-19 nos Estados Foco")
plotfocusStates
