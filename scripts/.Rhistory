summary(pacientes)
summary(iris)
# Exercício 7 - Crie um plot simples usando as duas primeiras colunas do dataframe iris
plot(iris)
example('matplot')
plot(iris, col = 1:2)
example('plot')
plot(iris, col = 1,2)
select(iris, Sepal.Length, Sepal.Width)
library(dplyr)
select(iris, Sepal.Length, Sepal.Width)
miniIris = select(iris, Sepal.Length, Sepal.Width)
plot(miniIris)
# Exercício 8 - Usando a função subset, crie um novo dataframe com o conjunto de dados do
# dataframe iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
?subset
# Exercício 8 - Usando a função subset, crie um novo dataframe com o conjunto de dados do
# dataframe iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
example('subset')
subset(iris,Sepal.Length > 7)
iris[Sepal.Length > 7]
irisSepalMaiorSete = subset(iris,Sepal.Length > 7)
irisSepalMaiorSete
# Exercícios 9 (Desafio) - Crie um dataframe que seja cópia do dataframe iris e usando a
# função slice(), divida o dataframe em um subset de 15 linhas
# Dica 1: Você vai ter que instalar e carregar o pacote dplyr
# Dica 2: Consulte o help para aprender como usar a função slice()
library(dplyr)
# Exercícios 9 (Desafio) - Crie um dataframe que seja cópia do dataframe iris e usando a
# função slice(), divida o dataframe em um subset de 15 linhas
# Dica 1: Você vai ter que instalar e carregar o pacote dplyr
# Dica 2: Consulte o help para aprender como usar a função slice()
install.packages('dplyr')
install.packages("dplyr")
library(dplyr)
?slice
# Exercício 8 - Usando a função subset, crie um novo dataframe com o conjunto de dados do
# dataframe iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
example('subset')
# Exercício 8 - Usando a função subset, crie um novo dataframe com o conjunto de dados do
# dataframe iris em que Sepal.Length > 7
# Dica: consulte o help para aprender como usar a função subset()
?subset
?slice
slice(irisCopia, 1:15)
slice(irisCopia, 15)
irisCopia = iris
irisCopia
slice(irisCopia, 15)
slice(irisCopia, 1:15)
# Exercícios 10 - Use a função filter no seu novo dataframe criado no item anterior e
# retorne apenas valores em que Sepal.Length > 6
# Dica: Use o RSiteSearch para aprender como usar a função filter
filter(irisCopia, Sepal.Length > 6)
# Exercício 3 - Crie uma lista unindo o vetor e matriz criados anteriormente
lista <- list(c(vetor30,matriz4x4))
# Exercício 1 - Crie um vetor com 30 números inteiros
vetor30 <- c(1:30)
vetor30
# Exercício 2 - Crie uma matriz com 4 linhas e 4 colunas preenchida com números inteiros
matriz4x4 <- matrix(c(1:16), nc=4, nr=4, byrow=TRUE)
# Exercício 3 - Crie uma lista unindo o vetor e matriz criados anteriormente
lista <- list(c(vetor30,matriz4x4))
lista
# Exercício 4 - Usando a função read.table() leia o arquivo do link abaixo para um dataframe
# http://data.princeton.edu/wws509/datasets/effort.dat
dataframe1 <- read.table("http://data.princeton.edu/wws509/datasets/effort.dat")
dataframe1
# Exercício 5 - Transforme o dataframe anterior, em um dataframe nomeado com os seguintes labels:
# c("config", "esfc", "chang")
colnames(dataframe1) = (list(c("config", "esfc", "chang")))
dataframe1
# Exercício 5 - Transforme o dataframe anterior, em um dataframe nomeado com os seguintes labels:
# c("config", "esfc", "chang")
colnames(dataframe1) = (c("config", "esfc", "chang"))
dataframe1
names(dataframe1) = (c("config", "esfc", "chang"))
dataframe1
# Exercício 4 - Usando a função read.table() leia o arquivo do link abaixo para um dataframe
# http://data.princeton.edu/wws509/datasets/effort.dat
dataframe1 <- read.table("http://data.princeton.edu/wws509/datasets/effort.dat")
dataframe1
names(dataframe1) = (c("config", "esfc", "chang"))
dataframe1
view(data_frame1)
view(dataframe1)
View(dataframe1)
class(iris)
dim(iris)
str(iris)
plot(iris$Sepal.Length, iris$Sepal.Width)
# Exercícios 10 - Use a função filter no seu novo dataframe criado no item anterior e
# retorne apenas valores em que Sepal.Length > 6
# Dica: Use o RSiteSearch para aprender como usar a função filter
RSiteSearch(filter)
# Exercícios 10 - Use a função filter no seu novo dataframe criado no item anterior e
# retorne apenas valores em que Sepal.Length > 6
# Dica: Use o RSiteSearch para aprender como usar a função filter
RSiteSearch('filter')
v <- c(2,1,2,3,1,2,3,4,1,5,5,3,2,3)
v
uniqv <- unique(v)
uniqv
match(v, uniqv)
tabulate(match(v, uniqv))
which.max(tabulate(match(v, uniqv)))
uniqv[which.max(tabulate(match(v, uniqv)))]
tamanhos = c(38, 38, 36, 37, 36, 36, 40, 39, 36, 35, 36)
mean(tamanhos)
median(tamanhos)
moda = function(dados) {
vetor = table(as.vector(dados))
names(vetor)[vetor == max(vetor)]
}
moda(tamanhos)
vetor = table(as.vector(tamanhos))
vetor
as.vector(tamanhos)
tamanhos = c(38, 38, 36, 37, 36, 36, 40, 39, 36, 35, 36)
class(tamanhos)
typeof(tamanhos)
mode(tamanhos)
tamanhos = c(38, 38, 36, 37, 36, 36, 40, 39, 36, 35, 36)
tamanhos
class(tamanhos)
typeof(tamanhos)
mode(tamanhos)
as.vector(tamanhos)
tamanhos
vetorTam = as.vector(tamanhos)
tamanhos
vetor = table(as.vector(tamanhos))
vetor
class(vetor)
typeof(vetor)
mode(vetor)
summary(vetor)
dim(vetor)
names(vetor)
vetor
vetor
vetor == max(vetor)
vetor
names(vetor)[vetor == max(vetor)]
names(vetor)
teste = names(vetor)
teste
teste = names(vetor)[vetor == max(vetor)]
teste
# Exercício 7 - Se houver 12 carros atravessando uma ponte por minuto, em média,
# encontre a probabilidade de ter 15 ou mais carros cruzando a ponte em um determinado minuto.
?dpois
dpois(15,1)
dpois(12,1)
dpois(15,1)
# Exercício 8 - Suponha que haja 12 questões de múltipla escolha em um questionário de inglês.
# Cada questão tem cinco respostas possíveis e apenas uma delas está correta.
# Encontre a probabilidade de ter quatro ou menos respostas corretas se um aluno tentar
# responder a cada pergunta aleatoriamente.
dbinom(1, 5)
dbinom(4, 12, 0.20)
# Exercício 7 - Se houver 12 carros atravessando uma ponte por minuto, em média,
# encontre a probabilidade de ter 15 ou mais carros cruzando a ponte em um determinado minuto.
# A probabilidade de ter 14 ou menos carros atravessando a ponte em um
# determinado minuto é dada pela função ppois.
ppois(14, lambda=12)
ppois(15, 12, lower=FALSE)
pbinom(4, 12, 0.2)
dbinom(4, 12, 0.20)
# Erro padrão
erro_padrao_amostra1 = sd(amostra1$arr_delay) / sqrt(nrow(amostra1))
library('ggplot2')
library('dplyr')
library('nycflights13')
pop_data <- subset(flights, carrier == "UA" | carrier == "DL", select = c(carrier, arr_delay))
# Dica: inclua uma coluna chamada sample_id preenchida com número 1 para a primeira
# amostra e 2 para a segunda amostra
amostra1 <- head(subset(pop_data, carrier == "UA"), 1000)
amostra1$sample_id <-1
amostra2 <- head(subset(pop_data, carrier == "DL"), 1000)
amostra2$sample_id <-2
dataset_final <- merge(amostra1, amostra2, all = TRUE)
View(dataset_final)
# Erro padrão
erro_padrao_amostra1 = sd(amostra1$arr_delay) / sqrt(nrow(amostra1))
erro_padrao_amostra1
# Exercício 5 - Calcule o intervalo de confiança (95%) da amostra2
erro_padrao_amostra2 = sd(amostra2$arr_delay) / sqrt(nrow(amostra2))
erro_padrao_amostra2
# Erro padrão
sd1 = sd(amostra1$arr_delay)
sd1
# Erro padrão
sd1 = sd(amostra1$arr_delay, na.rm=TRUE)
sd1
erro_padrao_amostra1 = sd(amostra1$arr_delay, na.rm=TRUE) / sqrt(nrow(amostra1))
erro_padrao_amostra1
erro_padrao_amostra1 = sd(amostra1$arr_delay na.rm=TRUE) / sqrt(nrow(amostra1))
erro_padrao_amostra1 = sd(amostra1$arr_delay, na.rm=TRUE) / sqrt(nrow(amostra1))
erro_padrao_amostra1
# Exercício 5 - Calcule o intervalo de confiança (95%) da amostra2
erro_padrao_amostra2 = sd(amostra2$arr_delay, na.rm=TRUE) / sqrt(nrow(amostra2))
erro_padrao_amostra2
# Intervalo de confiança
intervaloAmostra1 <- 1 - erro_padrao_amostra1
intervaloAmostra1
intervaloAmostra2 <- 1 - erro_padrao_amostra2
intervaloAmostra2
install.packages(c("gdata", "readxl", "rJava", "XLConnect", "xlsx"))
# Instalando os pacotes
install.packages('rJava')
# Instalando os pacotes
install.packages('rJava')
# Instalando os pacotes
install.packages('rJava')
# Instalando os pacotes
install.packages('rJava')
# Instalando os pacotes
install.packages('rJava')
install.packages("xlsx")
install.packages("XLConnect")
install.packages("readxl")
setwd("/home/talita/covidProject/scripts")
getwd()
# Carregando os pacotes
library(dplyr)
library(ggplot2)
# Listando os arquivos e gerando uma lista com os respctivos nomes
temp_files <- list.files(pattern = ".csv")
temp_files
# Carregando todos os arquivos em um único objeto
myfiles <- lapply(temp_files, read.csv, stringsAsFactors = FALSE)
# Resumo do arquivo
read.csv("COVID-19-worldwide.csv")
world <- do.call(rbind, myfiles)
View(world)
world <- world %>%
mutate(dateRep = as.Date(dateRep))
# Visualizando o dataset
glimpse(world)
# Comparando Brasil e Itália
world %>% filter(countriesAndTerritories == "Brazil" | countriesAndTerritories == "Italy" | countriesAndTerritories == "United_States_of_America" | countriesAndTerritories == "Spain" | countriesAndTerritories == "Iran" | countriesAndTerritories == "China" | countriesAndTerritories == "France")
# Comparando Brasil e Itália
targetCountries <- world %>% filter(countriesAndTerritories == "Brazil" | countriesAndTerritories == "Italy" | countriesAndTerritories == "United_States_of_America" | countriesAndTerritories == "Spain" | countriesAndTerritories == "Iran" | countriesAndTerritories == "China" | countriesAndTerritories == "France")
targetCountries %>%
ggplot(aes(x = dateRep, y = cases, group = countriesAndTerritories, color = countriesAndTerritories)) +
geom_line() +
geom_point() +
ggtitle("Casos de COVID-19 por Região do Brasil")
# Totalizando
brazil <- world %>% filter(countriesAndTerritories == "Brazil")
ggplot(brazil)
# Totalizando
brazil <- world %>% filter(countriesAndTerritories == "Brazil" & cases != 0)
View(brazil)
# Comparando Países
targetCountries <- world %>%
filter(countriesAndTerritories == "Brazil" | countriesAndTerritories == "Italy" | countriesAndTerritories == "United_States_of_America" | countriesAndTerritories == "Spain" | countriesAndTerritories == "Iran" | countriesAndTerritories == "China" | countriesAndTerritories == "France") %>%
filter(cases != 0)
targetCountries %>%
ggplot(aes(x = dateRep, y = cases, group = countriesAndTerritories, color = countriesAndTerritories)) +
geom_line() +
geom_point() +
ggtitle("Casos de COVID-19 por Região do Brasil")
total_brazil <- sum(brazil$cases)
total_brazil
# Listando os arquivos e gerando uma lista com os respctivos nomes
temp_files <- list.files(pattern = ".csv")
temp_files
# Listando os arquivos e gerando uma lista com os respctivos nomes
temp_files <- list.files(pattern = ".csv")
temp_files
# Carregando todos os arquivos em um único objeto
myfiles <- lapply(temp_files, read.csv, stringsAsFactors = FALSE)
# Resumo dos arquivos
str(myfiles, 1)
lapply(myfiles, names)[1]
lapply(myfiles, head,2)[1:2]
# Resumo do arquivo
read.csv("COVID-19-worldwide.csv")
# Organizando o shape dos dados
?mutate
world <- do.call(rbind, myfiles)
View(world)
world <- world %>%
mutate(dateRep = as.Date(dateRep))
# Visualizando o dataset
glimpse(world)
# Comparando Países
targetCountries <- world %>%
filter(countriesAndTerritories == "Brazil" | countriesAndTerritories == "Italy" | countriesAndTerritories == "United_States_of_America" | countriesAndTerritories == "Spain" | countriesAndTerritories == "Iran" | countriesAndTerritories == "China" | countriesAndTerritories == "France") %>%
filter(cases != 0)
targetCountries %>%
ggplot(aes(x = dateRep, y = cases, group = countriesAndTerritories, color = countriesAndTerritories)) +
geom_line() +
geom_point() +
ggtitle("Casos de COVID-19 por Região do Brasil")
# Totalizando casos
brazil <- world %>% filter(countriesAndTerritories == "Brazil" & cases != 0)
total_brazil <- sum(brazil$cases)
total_brazil
View(brazil)
total_cases_brazil <- sum(brazil$cases)
total_cases_brazil
?sapply
ggplot(brazil, aes(dateRep, cases,colours=cases)) +
geom_line() +
geom_point()
ggplot(brazil, aes(dateRep, cases,colours=cases))
ggplot(brazil, aes(dateRep, cases,colours=cases)) +
geom_line()
ggplot(brazil, aes(dateRep, cases,colours=cases)) +
geom_line() +
geom_point()
ggplot(brazil, aes(dateRep, cases,colours=red)) +
geom_line() +
geom_point()
ggplot(brazil, aes(dateRep, cases,colours=case)) +
geom_line() +
geom_point()
ggplot(brazil, aes(dateRep, cases,colours=cases)) +
geom_line() +
geom_point()
ggplot(brazil, aes(dateRep, cases, colours=cases)) +
geom_line(colors(red)) +
geom_point()
ggplot(brazil, aes(dateRep, cases, colours=cases)) +
geom_line() +
geom_point() +
ggtitle("Casos de COVID-19 no Brasil por dia")
ggplot(brazil, aes(dateRep, cases, colours=cases)) +
geom_line(color="red") +
geom_point() +
ggtitle("Casos de COVID-19 no Brasil por dia")
ggplot(brazil, aes(dateRep, cases, colours=cases)) +
geom_line(color="red") +
geom_point(color="red") +
ggtitle("Casos de COVID-19 no Brasil por dia")
ggplot(brazil, aes(dateRep, sum(cases), colours=cases)) +
geom_line(color="red") +
geom_point(color="red") +
ggtitle("Casos de COVID-19 no Brasil")
ggplot(brazil, aes(dateRep, apply(sum, cases), colours=cases)) +
geom_line(color="red") +
geom_point(color="red") +
ggtitle("Casos de COVID-19 no Brasil")
ggplot(brazil, aes(dateRep, apply(FUN = sum(cases)), colours=cases)) +
geom_line(color="red") +
geom_point(color="red") +
ggtitle("Casos de COVID-19 no Brasil")
ggplot(brazil, aes(dateRep, tapply(cases, sum), colours=cases)) +
geom_line(color="red") +
geom_point(color="red") +
ggtitle("Casos de COVID-19 no Brasil")
ggplot(brazil, aes(dateRep, apply(cases, sum), colours=cases)) +
geom_line(color="red") +
geom_point(color="red") +
ggtitle("Casos de COVID-19 no Brasil")
teste <- as.integer(brazil$dateRep)
teste
class(teste)
typeof(teste)
for (i in as.integer(brazil$dateRep)) {
brazil$total_cases <- brazil$totalcases + cases
}
brazil$total_cases <- brazil$totalcases + brazil$cases
brazil$total_cases[i] <- brazil$totalcases[i] + brazil$cases[i]
brazil$total_cases
for (i in as.integer(brazil$dateRep)) {
brazil$total_cases[i] <- brazil$totalcases[i] + brazil$cases[i]
brazil$total_cases
}
View(brazil)
brazil$total_cases <- 0
View(brazil)
for (i in as.integer(brazil$dateRep)) {
brazil$total_cases[i] <- brazil$totalcases[i] + brazil$cases[i]
brazil$total_cases
}
brazil$total_cases[i] <- brazil$cases[i]
for (i in as.integer(brazil$dateRep)) {
brazil$total_cases[i] <- brazil$cases[i]
brazil$total_cases
}
View(brazil)
brazil$total_cases <- 2
View(brazil)
for (i in as.integer(brazil$dateRep[0]):as.integer(brazil$dateRep[brazil$dateRep.length])) {
brazil$total_cases[i] <- brazil$totalcases[i] + brazil$cases[i]
brazil$total_cases
}
for (i in as.integer(brazil$dateRep[0]):as.integer(brazil$dateRep[brazil.length])) {
brazil$total_cases[i] <- brazil$totalcases[i] + brazil$cases[i]
brazil$total_cases
}
for (i in as.integer(brazil$dateRep[0]):as.integer(brazil$dateRep[25])) {
brazil$total_cases[i] <- brazil$totalcases[i] + brazil$cases[i]
brazil$total_cases
}
View(brazil)
for (i in seq_along(brazil)) {
brazil$total_cases[i] <- brazil$totalcases[i] + brazil$cases[i]
brazil$total_cases
}
length(brazil)
for (i in nrow(brazil)) {
brazil$total_cases[i] <- brazil$totalcases[i] + brazil$cases[i]
brazil$total_cases
}
nrow(brazil)
apply(brazil$total_cases, 1, FUN = sum(cases))
apply(brazil$total_cases, 1, FUN = sum)
View(brazil)
for (i in nrow(brazil)) {
brazil$total_cases <- brazil$totalcases + brazil$cases
brazil$total_cases
}
for (i in 0:nrow(brazil)) {
brazil$total_cases <- brazil$totalcases + brazil$cases
brazil$total_cases
}
for (i in nrow(brazil):2) {
brazil$total_cases[i] <- brazil$totalcases[i] + brazil$cases[i-1]
brazil$total_cases
}
for (i in nrow(brazil):2) {
brazil$total_cases[i,] <- brazil$totalcases[i,] + brazil$cases[i-1]
brazil$total_cases
}
for (i in nrow(brazil):2) {
brazil$total_cases <- brazil$totalcases + brazil$cases[(i-1)]
brazil$total_cases
}
for (i in nrow(brazil):2) {
brazil$total_cases <- brazil$totalcases + brazil$cases
}
for (i in nrow(brazil):2) {
brazil$total_cases <- 3
}
for (i in nrow(brazil):2) {
brazil$total_cases = brazil$totalcases + brazil$cases
}
brazil$total_cases = brazil$cases
for (i in nrow(brazil):2) {
brazil$total_cases = brazil$cases
}
# Totalizando casos
brazil <- world %>% filter(countriesAndTerritories == "Brazil" & cases != 0)
brazil$total_cases <- 2
brazil$total_cases <- 2
nrow(brazil)
View(brazil)
aggregate(total_cases ~ total_cases + cases, data = brazil, FUN = 'sum')
View(brazil)
brazil$total_cases <- 1
aggregate(total_cases ~ total_cases + cases, data = brazil, FUN = 'sum')
library(plyr)
ddply(brazil, .(total_cases,cases), summarize, foo = sum(total_cases))
# Totalizando casos
brazil <- world %>% filter(countriesAndTerritories == "Brazil" & cases != 0)
brazil$total_cases <- c(4256,3904,3417,2915,2433,2201,1891,1546,1128,904,621,428,291,234,200,121,98,77,52,34,25,13,8,3,2,1)
View(brazil)
total_cases_brazil <- sum(brazil$cases)
total_cases_brazil
# Gerando gráfico de casos
ggplot(brazil, aes(dateRep, total_cases, colours=cases)) +
geom_line(color="red") +
geom_point(color="red") +
ggtitle("Casos de COVID-19 no Brasil por dia")
# Gerando gráfico de casos
ggplot(brazil, aes(dateRep, total_cases)) +
geom_line(color="red") +
geom_point(color="red") +
ggtitle("Casos de COVID-19 no Brasil por dia")
ggplot(brazil, aes(dateRep, cases, colours=cases)) +
geom_line(color="red") +
geom_point(color="red") +
ggtitle("Casos de COVID-19 no Brasil")
# Gerando gráfico de casos
ggplot(brazil, aes(dateRep, cases, colours=cases)) +
geom_line(color="red") +
geom_point(color="red") +
ggtitle("Casos de COVID-19 no Brasil por dia")
ggplot(brazil, aes(dateRep, total_cases)) +
geom_line(color="red") +
geom_point(color="red") +
ggtitle("Casos de COVID-19 no Brasil")
ggplot(brazil, aes(dateRep, total_cases, na.omit(true()))) +
geom_line(color="red") +
geom_point(color="red") +
ggtitle("Casos de COVID-19 no Brasil")
ggplot(brazil, aes(dateRep, !is.na(total_cases))) +
geom_line(color="red") +
geom_point(color="red") +
ggtitle("Casos de COVID-19 no Brasil")
ggplot(brazil, aes(dateRep, total_cases, na.rm = TRUE)) +
geom_line(color="red") +
geom_point(color="red") +
ggtitle("Casos de COVID-19 no Brasil")
ggplot(brazil, aes(dateRep, total_cases, na.rm = TRUE)) +
geom_line(color="red", na.rm = TRUE) +
geom_point(color="red", na.rm = TRUE) +
ggtitle("Casos de COVID-19 no Brasil")
g
ggplot(brazil[which(brazil$total_cases>0), aes(dateRep, total_cases)) +
ggplot(brazil[which(brazil$total_cases>0),], aes(dateRep, total_cases)) +
geom_line(color="red") +
geom_point(color="red") +
ggtitle("Casos de COVID-19 no Brasil")
